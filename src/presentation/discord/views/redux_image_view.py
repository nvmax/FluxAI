"""
Discord view for displaying Redux generated images.
Only includes a delete button.
"""

import discord
import logging
from discord.ui import View

logger = logging.getLogger(__name__)

class OldReduxImageView(View):  # Renamed to avoid conflicts
    """
    View for displaying Redux generated images.
    Only provides a delete button.
    """

    def __init__(self):
        """
        Initialize the Redux image view.
        """
        super().__init__(timeout=None)  # Make this view persistent

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        """
        Check if the user can interact with the view.

        Args:
            interaction: Discord interaction

        Returns:
            True if the user can interact, False otherwise
        """
        # Check if the channel is allowed
        if hasattr(interaction.client, 'allowed_channels') and interaction.channel_id not in interaction.client.allowed_channels:
            await interaction.response.send_message(
                "This command can only be used in specific channels.",
                ephemeral=True
            )
            return False

        return True

    @discord.ui.button(custom_id="delete", style=discord.ButtonStyle.danger, label="Delete", emoji="üóëÔ∏è")
    async def delete_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """
        Handle delete button click.

        Args:
            interaction: Discord interaction
            button: Button that was clicked
        """
        try:
            # Check if the user is the original requester or has manage messages permission
            message = interaction.message

            # Get the embed
            embed = message.embeds[0] if message.embeds else None
            if not embed:
                await interaction.response.send_message(
                    "Could not find image information.",
                    ephemeral=True
                )
                return

            # Get the author from the embed footer
            footer_text = embed.footer.text if embed and embed.footer else ""

            # Check if the user is the original author or has manage messages permission
            is_author = False
            if footer_text.startswith("Image Generated by "):
                author_name = footer_text[len("Image Generated by "):]
                is_author = author_name == interaction.user.display_name

            has_permission = interaction.user.guild_permissions.manage_messages if interaction.guild else False

            if not (is_author or has_permission):
                await interaction.response.send_message(
                    "You don't have permission to delete this image.",
                    ephemeral=True
                )
                return

            # Delete the message
            await message.delete()

            # No need to send a response since the message is deleted

        except Exception as e:
            logger.error(f"Error in delete button: {e}", exc_info=True)

            # Try to respond if possible
            try:
                if not interaction.response.is_done():
                    await interaction.response.send_message(
                        f"An error occurred: {str(e)}",
                        ephemeral=True
                    )
                else:
                    await interaction.followup.send(
                        f"An error occurred: {str(e)}",
                        ephemeral=True
                    )
            except:
                pass  # If we can't respond, just log the error
